plan.txt

PLAN
====

Investigate resource uage and performance data measured through VOLUNTARY AND 
INVOLUNTARY CONTEXT SWITCHES! WOO!

- X	measure the number of blocking and non-blocking mutex accesses (in log.c - 
	this will most naturally be a per-process rather than per-thread 
	measurement, unless the log.c functions return the blocking statistics to 
	the thread for self-storage, or somehow store statistics indexed by thread)

- X	measure the number of blocking and non-blocking socket reads and writes (
	i suppose this could either happen in codemaker.c or mastermind.c - most
	naturally in codemaker.c for storage reasons except most accurately in
	mastermind.c as it workd with actual read operations)

	these should be logged during gameplay (rather than stored and logged at 
	the conclusion of the game, as this has consequences for termination while
	some clients are still connected)

- X	at termination, get rusage data for process about voluntary context switches
	and non-voluntary context switches too, and append these statistics along
	with running global statistics from the log module to the end of the logfile

	// DAMN! looks like 'ru_oublock' and 'ru_inblock' are not really there!

- X	write a script that will test server load on both digitalis and NeCTAR once
	this is all working

-	and report on results, comparing them. add 'valid discussion' to this report

-	???

-	profit



FURTHER INVESTIGATION
=====================

-	get PER-THREAD rusage data at the conclusion of each game instead (in the
	post-game part of the thread's initial function) and add this to a list in
	the logfile so that it can append PER-THREAD information at the conclusion
	of the server

	for this to be useful we'll also need to store PER-THREAD statistics along
	the way, about blocking reads and writes, and so we'll probably need to keep
	track of active threads at any once time using some clever data structure
	(like a limited-size buffer of threads that fills wholes with one swap 
	because it's not sorted? mmmmhmmmmm data structures are fun!)

TODO
====

- X	clean up mastermind protocol: (sending messages) or (not sending messages)?

- X	finish implementing and integrating logfile functionality

- X	finish implementing and integrating statistics gathering functionality

	X trylock:
	https://computing.llnl.gov/tutorials/pthreads/#MutexLocking

	X select:
	http://www.beej.us/guide/bgnet/output/html/singlepage/bgnet.html#select

	X can we measure blocking on i/o to file? (probs, and probably doesn't 
	really even happen)


	X getrusage:
	http://www.gnu.org/software/libc/manual/html_node/Resource-Usage.html
	(can easily test if argument is valid or not! read that one)
	
	http://man7.org/linux/man-pages/man2/getrusage.2.html

- X	play with pthread_sigmask(3) for threadsafe termination during logging
	(having a unique, non-logging thread that requests a lock? there aren't
	too many other issues to consider since after the lock we will be 
	terminating anyway, right? I guess not necessarily immediately since
	context switches could bring us back into other threads while we service
	the interrupt - what can we do though?)

	http://stackoverflow.com/questions/2575106/posix-threads-and-signals

	http://www.linuxquestions.org/questions/programming-9/
	locking-mutex-in-a-signal-handler-function-789218/
	
	http://stackoverflow.com/questions/11679568/
	signal-handling-with-multiple-threads-in-linux

	http://man7.org/linux/man-pages/man3/pthread_sigmask.3.html

	Ended up looking at:

	basically this answer was the most helpful:
	http://stackoverflow.com/a/5282158/5395650

	sigsuspend:
	http://www.gnu.org/software/libc/manual/html_node/Sigsuspend.html

- X	perform experiments and write report

- X	add documentation to code

- X	submit!